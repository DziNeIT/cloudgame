import org.apache.tools.ant.filters.ReplaceTokens
import org.yaml.snakeyaml.Yaml

apply plugin: 'java'
apply plugin: 'shadow'
apply plugin: 'maven'
apply plugin: 'signing'

Yaml yaml = new Yaml()
ext.plugin = yaml.load(new FileInputStream(new File(projectDir, 'src/main/resources/plugin.yml')))

group = 'pw.ian'
archivesBaseName = plugin.name.toLowerCase()
version = '0.1.0-SNAPSHOT'

defaultTasks 'clean', 'build', 'shadow', 'install'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        ivy {
            url 'http://dl.bintray.com/content/johnrengelman/gradle-plugins'
        }
    }

    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.5'
        classpath 'org.gradle.plugins:shadow:0.7'
    }
}

repositories {
    mavenCentral()
    maven {
        url 'http://repo.md-5.net/content/groups/public/'
    }
    maven {
        url 'http://ci.frostcast.net/plugin/repository/everything'
    }
}

dependencies {
    compile 'org.bukkit:bukkit:1.7.9-R0.3-SNAPSHOT'
    compile 'me.confuser:BarAPI:3.0'
    compile fileTree(dir: 'libs', includes: ['*.jar']) 
}

def cmd(str) {
    try {
        def output = new ByteArrayOutputStream()
        exec {
            commandLine str.split(' ')
            standardOutput = output
        }
        return output.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

processResources {
    def fullVersion = version + '-g' + cmd('git describe --always --dirty=-dirty')
    from('src/main/resources') {
        include '*'
        filter { String line -> line.replace('$version', fullVersion) }
    }
}

shadow {
    artifactAttached = false
    outputFile = jar.archivePath
    artifactSet {
        exclude '*'
    }
}

task scaffold << {
    // Make artifact source directory
    def pkg = plugin.main.substring(0, plugin.main.lastIndexOf('.'))
    def mainClass = plugin.main.substring(plugin.main.lastIndexOf('.') + 1, plugin.main.length())
    def artifactPath = new File('src/main/java/' + plugin.main.replace('.', '/')).getAbsolutePath()
    def artifactSrcDir = new File(artifactPath.substring(0, artifactPath.lastIndexOf(File.separator)))
    artifactSrcDir.mkdirs()
    
    // Copy plugin bootstrap file over
    copy {
        from '.bootstrap/'
        into artifactSrcDir.getPath()
        include 'PluginBootstrap.java'
        rename '.*', plugin.name + '.java'
        
        filter(ReplaceTokens, tokens: [pkg: pkg, pluginName: mainClass])
    }
    
    if ((cmd('git remote -v') =~ /origin.+?bukkit-bootstrap\.git/).find()) {
        cmd('git remote rename origin bukkit-bootstrap')
    }
}

task testCopy << {
    cmd("mkdir -p $testPluginDir")
    cmd("cp $projectDir/build/libs/${jar.baseName}.jar $testPluginDir")
}

task remoteCopy << {
    cmd("scp $projectDir/build/libs/${jar.baseName}.jar $remotePluginDir")
}

// Publishing stuff
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name plugin.name
                packaging 'jar'
                description plugin.description
                url plugin.url
            }
        }
    }
}
